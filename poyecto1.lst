CCS PCM C Compiler, Version 5.015, 5967               02-abr.-23 18:16

               Filename:   C:\Users\andres\Documents\pic\MULTIPLEXACION DISPLAY\poyecto1.lst

               ROM used:   136 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           11 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   027
0003:  NOP
.................... #INCLUDE<16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  40
0009:  RETLW  79
000A:  RETLW  24
000B:  RETLW  30
000C:  RETLW  19
000D:  RETLW  12
000E:  RETLW  02
000F:  RETLW  78
0010:  RETLW  00
0011:  RETLW  10
....................  
.................... #list 
....................  
.................... #USE DELAY(CLOCK=4000000) 
0012:  MOVLW  25
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  01
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  4A
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  GOTO   024
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
.................... #FUSES XT,PROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP 
.................... #DEFINE LED PORTB,0 
.................... #DEFINE act1 PORTC,0 
.................... #DEFINE act2 PORTC,1 
.................... #DEFINE act3 PORTC,2 
.................... #DEFINE act4 PORTC,3 
.................... #BYTE PORTB= 6 
.................... #BYTE PORTC=7 
.................... Byte CONST display[10]= {0b1000000,0b1111001,0b0100100 
.................... ,0b0110000,0b0011001,0b0010010 
.................... ,0b0000010,0b1111000,0b0000000,0b0010000}; 
....................  
.................... VOID MAIN() 
0027:  MOVF   03,W
0028:  ANDLW  1F
0029:  MOVWF  03
002A:  MOVLW  FF
002B:  MOVWF  20
002C:  BSF    03.5
002D:  BSF    03.6
002E:  MOVF   09,W
002F:  ANDLW  C0
0030:  MOVWF  09
0031:  BCF    03.6
0032:  BCF    1F.4
0033:  BCF    1F.5
0034:  MOVLW  00
0035:  BSF    03.6
0036:  MOVWF  08
0037:  BCF    03.5
0038:  CLRF   07
0039:  CLRF   08
003A:  CLRF   09
003B:  BCF    03.7
.................... { 
....................     
....................    SET_TRIS_B(0B000000);    //Configura el puerto B 
003C:  MOVLW  00
003D:  BSF    03.5
003E:  BCF    03.6
003F:  MOVWF  06
....................    PORTB=0; 
0040:  BCF    03.5
0041:  CLRF   06
....................    SET_TRIS_C(0B0000000); 
0042:  BSF    03.5
0043:  MOVWF  07
0044:  BCF    03.5
0045:  MOVWF  20
....................    int uni=0; 
....................    int dec=0; 
....................    int cent=0; 
....................    int mil=0; 
0046:  CLRF   21
0047:  CLRF   22
0048:  CLRF   23
0049:  CLRF   24
....................    while(TRUE){ 
....................     
....................         
....................       
....................       PORTB=display[uni]; 
004A:  MOVF   21,W
004B:  CALL   004
004C:  MOVWF  78
004D:  MOVWF  06
....................       BIT_SET(act1); 
004E:  BSF    07.0
....................       delay_ms(4); 
004F:  MOVLW  04
0050:  MOVWF  25
0051:  CALL   012
....................       BIT_CLEAR(act1); 
0052:  BCF    07.0
....................       PORTB=display[dec]; 
0053:  MOVF   22,W
0054:  CALL   004
0055:  MOVWF  78
0056:  MOVWF  06
....................       BIT_SET(act2); 
0057:  BSF    07.1
....................       delay_ms(4); 
0058:  MOVLW  04
0059:  MOVWF  25
005A:  CALL   012
....................       BIT_CLEAR(act2); 
005B:  BCF    07.1
....................       PORTB=display[cent]; 
005C:  MOVF   23,W
005D:  CALL   004
005E:  MOVWF  78
005F:  MOVWF  06
....................       BIT_SET(act3); 
0060:  BSF    07.2
....................       delay_ms(4); 
0061:  MOVLW  04
0062:  MOVWF  25
0063:  CALL   012
....................       BIT_CLEAR(act3); 
0064:  BCF    07.2
....................       PORTB=display[mil]; 
0065:  MOVF   24,W
0066:  CALL   004
0067:  MOVWF  78
0068:  MOVWF  06
....................       BIT_SET(act4); 
0069:  BSF    07.3
....................       delay_ms(4); 
006A:  MOVLW  04
006B:  MOVWF  25
006C:  CALL   012
....................       BIT_CLEAR(act4); 
006D:  BCF    07.3
....................        
....................       uni++; 
006E:  INCF   21,F
....................        
....................       if(uni>9){ 
006F:  MOVF   21,W
0070:  SUBLW  09
0071:  BTFSS  03.0
....................          uni=0; 
0072:  CLRF   21
....................          } 
....................       if(uni==9){ 
0073:  MOVF   21,W
0074:  SUBLW  09
0075:  BTFSC  03.2
....................          dec++; 
0076:  INCF   22,F
....................       } 
....................       if(dec>9){ 
0077:  MOVF   22,W
0078:  SUBLW  09
0079:  BTFSS  03.0
....................          dec=0; 
007A:  CLRF   22
....................       } 
....................       if(dec==9){ 
007B:  MOVF   22,W
007C:  SUBLW  09
007D:  BTFSC  03.2
....................          cent++; 
007E:  INCF   23,F
....................       } 
....................       if(dec>9){ 
007F:  MOVF   22,W
0080:  SUBLW  09
0081:  BTFSC  03.0
0082:  GOTO   086
....................          cent==0; 
0083:  MOVF   23,F
0084:  BTFSS  03.2
0085:  MOVLW  00
....................       } 
0086:  GOTO   04A
....................        
....................        
....................      
....................      
....................      } 
....................       
....................       
....................     
....................      
.................... } 
....................  
0087:  SLEEP

Configuration Fuses:
   Word  1: 2CA1   XT NOWDT PUT MCLR PROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
